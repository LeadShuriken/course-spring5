package org.iproduct.spring.registration.dao;

import lombok.extern.slf4j.Slf4j;
import org.iproduct.spring.registration.model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import javax.annotation.PostConstruct;
import javax.sql.DataSource;
import javax.validation.Valid;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

@Repository
@Slf4j
public class UserRepositoryImpl implements UserRepository {

    public static final String INSERT_SQL =
            "INSERT INTO users(id, username, password, email, fname, lname, roles, active, created, updated) VALUES " +
                    "(DEFAULT, :username, :password, :fname, :lname, :email, :roles, :active, :created, :updated)";

    NamedParameterJdbcTemplate jdbcTemplate;

    @Autowired
    public void setDataSource(DataSource dataSource) {
        jdbcTemplate = new NamedParameterJdbcTemplate(dataSource);
    }

    @Override
    public List<User> findAll() {
        return jdbcTemplate.query("select * from users", new UserMapper());
    }

    @Override
    public Optional<User> findById(long id) {
        return Optional.empty();
    }

    @Override
    public Optional<User> findByUsername(String username) {
        return Optional.empty();
    }

    @Override
    public User insert(@Valid User user) {
        KeyHolder keyHolder = new GeneratedKeyHolder();
        SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(user);
        jdbcTemplate.update(INSERT_SQL, namedParameters, keyHolder);
//        jdbcTemplate.update(
//            con -> {
//                PreparedStatement ps =  con.prepareStatement(INSERT_SQL, new String[]{"id"});
//                ps.setString(1, user.getUsername());
//                ps.setString(2, user.getPassword());
//                ps.setString(3, user.getEmail());
//                ps.setString(4, user.getFname());
//                ps.setString(5, user.getLname());
//                ps.setString(6, user.getRoles());
//                ps.setBoolean(7, user.isActive());
//                ps.setTimestamp(8, new Timestamp(user.getCreated().getTime()));
//                ps.setTimestamp(9, new Timestamp(user.getUpdated().getTime()));
//                return ps;
//            }, keyHolder);
        user.setId(keyHolder.getKey().longValue());
        log.info("User created: {}", user);
        return user;
    }

    @Override
    public User save(User user) {
        return null;
    }

    @Override
    public boolean deleteById(long userId) {
        return false;
    }

    @Override
    public long count() {
        return 0;
    }

    @PostConstruct
    public void initUsers() {
        List<User> users = Arrays.asList(new User[]{
                new User("admin", "admin", "DEFAULT", "ADMIN", "admin@gmail.com", "ROLE_ADMIN"),
                new User("ivan", "ivan", "Ivan", "Petrov", "admin@gmail.com", "ROLE_USER")
        });

        // Users initialization
        log.info("Start data initialization  ...");
        jdbcTemplate.getJdbcTemplate().execute("DROP TABLE IF EXISTS users");
        jdbcTemplate.getJdbcTemplate().execute("CREATE TABLE IF NOT EXISTS users(" +
                "id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                "username VARCHAR(40), " +
                "password VARCHAR(80), " +
                "fname VARCHAR(40), " +
                "lname VARCHAR(40), " +
                "email VARCHAR(80), " +
                "roles VARCHAR(80), " +
                "active BOOLEAN, " +
                "created TIMESTAMP, " +
                "updated TIMESTAMP" +
                ")");

        // Create default users
        users.forEach(user -> insert(user));
        findAll().forEach(System.out::println);
    }
}
