package org.iproduct.spring.registration.dao;

import lombok.extern.slf4j.Slf4j;
import org.iproduct.spring.registration.model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.annotation.PostConstruct;
import javax.sql.DataSource;
import javax.validation.Valid;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

@Repository
@Slf4j
public class UserRepositoryImpl implements UserRepository {

    public static final String INSERT_SQL =
            "INSERT INTO users(id, username, password, email, fname, lname, roles, active, created, updated) VALUES " +
                    "(DEFAULT, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

    JdbcTemplate jdbcTemplate;

    @Autowired
    public void setDataSource(DataSource dataSource) {
        jdbcTemplate = new JdbcTemplate(dataSource);
    }

    @Override
    public List<User> findAll() {

        return null;
    }

    @Override
    public Optional<User> findById(long id) {
        return Optional.empty();
    }

    @Override
    public Optional<User> findByUsername(String username) {
        return Optional.empty();
    }

    @Override
    public User insert(@Valid User user) {
        return null;
    }

    @Override
    public User save(User user) {
        return null;
    }

    @Override
    public boolean deleteById(long userId) {
        return false;
    }

    @Override
    public long count() {
        return 0;
    }

    @PostConstruct
    public void initUsers() {
        List<User> users = Arrays.asList(new User[]{
                new User("admin", "admin", "DEFAULT", "ADMIN", "admin@gmail.com", "ROLE_ADMIN"),
                new User("ivan", "ivan", "Ivan", "Petrov", "admin@gmail.com", "ROLE_USER")
        });

        // Users initialization
        log.info("Start data initialization  ...");
        jdbcTemplate.execute("DROP TABLE IF EXISTS users");
        jdbcTemplate.execute("CREATE TABLE IF NOT EXISTS users(" +
                "id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                "username VARCHAR(40), " +
                "password VARCHAR(80), " +
                "email VARCHAR(80), " +
                "fname VARCHAR(40), " +
                "lname VARCHAR(40), " +
                "roles VARCHAR(80), " +
                "active BOOLEAN, " +
                "created TIMESTAMP, " +
                "updated TIMESTAMP" +
                ")");

        // Create default users
        users.forEach(user -> jdbcTemplate.update(INSERT_SQL, user.getUsername(),
                user.getPassword(), user.getEmail(), user.getFname(), user.getLname(),
                user.getRoles(), user.isActive(), user.getCreated(), user.getUpdated()));


    }
}
